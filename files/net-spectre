#!/bin/bash
VERSION="1.1.3stable"
RULES="/var/tmp/net-spectre.save"

# Tor's TransPort
TRANS_PORT="9040"
DNS_PORT="5353"

function startSpectre()
{
    if test -f "$RULES"; then
        echo -e "\e[1;33m [\\] $RULES exists. Either delete it, or stop NetSpectre first. \e[0m "
    else
		iptables-save >$RULES
    # Executable file to create rules for transparent proxy
    # Destinations you do not want routed through Tor
		EXCLUDE_TOR="192.168.0.0/16 172.16.0.0/12 10.0.0.0/8"
    # the UID Tor runs as, actually only support for Debian, ArchLinux and Fedora as been added.
		if command -v pacman >/dev/null; then
	        TOR_UID=$(id -u tor)
	    elif command -v apt >/dev/null; then
	        TOR_UID=$(id -u debian-tor)
	    elif command -v dnf >/dev/null; then
	    	TOR_UID=$(id -u toranon)

	    	else
	     		echo -e "\e[1;31m [-] Unknown distro, please create report the issue to https://github.com/Extr3m4R4710/NetSpectre/issue \e[0m "
				exit 1
		fi

		if ! command -v tor >/dev/null; then
	    	echo -e "\e[1;31m You need to install the tor package. \e[0m"
	        exit 1
		elif ! systemctl is-active tor.service >/dev/null; then
	        echo -e "\e[1;31 [-] The tor service is not active, please start the tor service before running the script. \e[0m"
	        exit 1
		elif ! command -v iptables >/dev/null; then
            echo -e "\e[1;31 You need to install the iptables package. \e[0m"
            exit 1
		else

      # disable ipv6
	    echo -e "\e[1;32m [+]  Disabling IPv6 for security reasons \e[0m]"
	    sysctl -w net.ipv6.conf.all.disable_ipv6=1
	    sysctl -w net.ipv6.conf.default.disable_ipv6=1


      # init IPTables roules
	    iptables -F
	    iptables -t nat -F

      # set IPTables nat
		echo -e "\e[1;32m [+] onfiguring iptables rules to route all traffic through tor \e[0m"
	    iptables -t nat -A OUTPUT -m owner --uid-owner "$TOR_UID" -j RETURN

      # set dns redirect
		echo -e "\e[1;32m [+] Redirectiing DNS traffic through tor \e[0m"
	    iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports $DNS_PORT

      #Executable local addresses
		for NET in $EXCLUDE_TOR 127.0.0.0/9 127.128.0.0/10; do
            iptables -t nat -A OUTPUT -d "$NET" -j RETURN
            iptables -A OUTPUT -d "$NET" -j ACCEPT
		done

      #redirect all other output through TOR
        iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TRANS_PORT
        iptables -t nat -A OUTPUT -p udp -j REDIRECT --to-ports "$TRANS_PORT"
	    iptables -t nat -A OUTPUT -p icmp -j REDIRECT --to-ports "$TRANS_PORT"

      #accept already established connections
        iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT


      #allow only tor output
		echo -e "\e[1;32m [+] Allowing only tor to browse in clearnet \e[0m"
		iptables -A OUTPUT -m owner --uid-owner "$TOR_UID" -j ACCEPT
		iptables -A OUTPUT -j REJECT

      # "ParrotSecのアイディアを緊急コピペ"
      ## TESTING block all incoming traffics
        iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
        iptables -A INPUT -i lo -j ACCEPT
		iptables -A INPUT -j DROP

      ### *filter FORWARD
		iptables -A FORWARD -j DROP

      ### *filter OUTPUT
		iptables -A OUTPUT -m state --state INVALID -j DROP
		iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT

     # Allow Tor process output
        iptables -A OUTPUT -m owner --uid-owner $TOR_UID -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j ACCEPT

     # Allow loopback output
        iptables -A OUTPUT -d 127.0.0.1/32 -o lo -j ACCEPT
     # iptables 1.8.5 can't use -o with input
     #  /usr/sbin/iptables -A INPUT -d 127.0.0.1/32 -o lo -j ACCEPT
     # Tor transproxy magic
		iptables -A OUTPUT -d 127.0.0.1/32 -p tcp -m tcp --dport "$TRANS_PORT" --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT
		fi
	fi
}

function stopSpectre()
{
    # re-enable ipv6
	sysctl -w net.ipv6.conf.all.disable_ipv6=0
    sysctl -w net.ipv6.conf.default.disable_ipv6=0

    if test -f "$RULES"; then
    	echo -e "\e[1;32m [+] Restoring previous rules from $RULES \e[0m"
        iptables -t nat -F
        iptables-restore <"$RULES"
	    rm "$RULES"
	else
        echo -e "\e[1;31m [X] $RULES does not exist. Not doing anything. \e[0m"
        exit
	fi
}

function restartSpectre()
{
	echo -e "\e[1;32m [+] reboot tor network \e[0m"
    stopSpectre
    startSpectre
}

case "$1" in
	start)
	    startSpectre
		;;
	stop)
	    stopSpectre
		;;
	restart)
	    restartSpectre
		;;
	myip)
    curl -sL ip-api.com/json | python -m json.tool
  ;;
*)

	echo -e "\e[1;32m Usage\e[1;32m: \e[1;31m$0 \e[1;34m{\e[1;36mstart\e[1;31m|\e[1;36mstop\e[1;31m|\e[1;36mrestart\e[1;31m|\e[1;36mmyip\e[1;34m}"
	;;
esac
